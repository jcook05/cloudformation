
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VDI Solution VPC Public Components'

Parameters:

  VpcBlock:
    Type: String
    Default: 10.1.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 10.1.1.0/24
    Description: CidrBlock for Public Subnet 1

  PublicSubnet02Block:
    Type: String
    Default: 10.1.2.0/24
    Description: CidrBlock for Public Subnet 2

  PrivateSubnet01Block:
    Type: String
    Default: 10.1.5.0/24
    Description: CidrBlock for Private Subnet 1

  PrivateSubnet02Block:
    Type: String
    Default: 10.1.6.0/24
    Description: CidrBlock for Private Subnet 2
  
  SSHBlock:
    Type: String
   
    

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPC Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  NACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
      - Key: Name
        Value: vdi Public Subnet NACL
      VpcId:
        Ref: VPC

## NACL Rules

  HTTPIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NACL
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  HTTPSIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NACL
      RuleNumber: '110'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  SSHIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NACL
      RuleNumber: '120'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref SSHBlock
      PortRange:
        From: '22'
        To: '22'

  RDPIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NACL
      RuleNumber: '130'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref SSHBlock
      PortRange:
        From: '3389'
        To: '3389'

  EphTcpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '140'
        Protocol: '6'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '1024'
          To: '65535'
## 150 and Below are for Active Directory.  Need to update CidrBlock to AD subnet CidrBlock
  DnsTcpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '150'
        Protocol: '6'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '53'
          To: '53'

  DnsUdpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '160'
        Protocol: '17'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '53'
          To: '53'

  KerbTcpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '170'
        Protocol: '6'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '88'
          To: '88'

  KerbUdpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '180'
        Protocol: '17'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '88'
          To: '88'

  NtpUdpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '190'
        Protocol: '17'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '123'
          To: '123'

  RpcTcpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '200'
        Protocol: '6'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '135'
          To: '135'

  NetLogUdpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '210'
        Protocol: '17'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '137'
          To: '138'

  NetLogTcpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '220'
        Protocol: '6'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '139'
          To: '139'

  LdapTcpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '230'
        Protocol: '6'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '389'
          To: '389'

  LdapUdpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '240'
        Protocol: '17'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '389'
          To: '389'

  SmbTcpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '250'
        Protocol: '6'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '445'
          To: '445'

  SmbUdpIngress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '260'
        Protocol: '17'
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '445'
          To: '445'
   
## Outbound

  EphTcpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '100'
        Protocol: '6'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '1024'
          To: '65535'

  EphUdpEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NACL
      RuleNumber: '110'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  HTTPSEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NACL
      RuleNumber: '120'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
 
  HTTPEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NACL
      RuleNumber: '130'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  DnsTcpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '140'
        Protocol: '6'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '53'
          To: '53'

  DnsUdpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '150'
        Protocol: '17'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '53'
          To: '53'

  KerbTcpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '160'
        Protocol: '6'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '88'
          To: '88'

  KerbUdpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '170'
        Protocol: '17'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '88'
          To: '88'

  NtpUdpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '180'
        Protocol: '17'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '123'
          To: '123'

  RpcTcpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '190'
        Protocol: '6'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '135'
          To: '135'

  NetLogUdpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '200'
        Protocol: '17'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '137'
          To: '138'

  NetLogTcpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '210'
        Protocol: '6'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '139'
          To: '139'

  LdapTcpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '220'
        Protocol: '6'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '389'
          To: '389'

  LdapUdpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '230'
        Protocol: '17'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '389'
          To: '389'

  SmbTcpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '240'
        Protocol: '6'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '445'
          To: '445'

  SmbUdpEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NACL
        RuleNumber: '250'
        Protocol: '17'
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '445'
          To: '445'

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet01"
  
  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet02"

  Subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet01"
  
  Subnet04:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet02"

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref PublicRouteTable

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref PublicRouteTable

  Subnet01NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref NACL
      SubnetId: !Ref Subnet01

  Subnet02NACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref NACL
      SubnetId: !Ref Subnet02

 
Outputs:

  SubnetIds:
    Description: All subnets in the VPC
    Value: !Join [ ",", [ !Ref Subnet01, !Ref Subnet02, !Ref Subnet03, !Ref Subnet04] ]
    Export: # added to export
      Name: VdiSubnetIds

  ADSubnet01:
    Description: Active Directory Subnets
    Value: !Ref Subnet03
    Export: # added to export
      Name: ADSubnet01

  ADSubnet02:
    Description: Active Directory Subnets
    Value: !Ref Subnet04
    Export: # added to export
      Name: ADSubnet02

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export: # added to export
      Name: VdiVpcId

  NaclId:
    Description:  NACL Id
    Value:  !Ref NACL
    Export: # added to export
      Name: VdiWorkspaceNacl
